                        The UPX Hacker's Guide
                        ======================


Foreword
--------

  The precompiled UPX versions are linked against the NRV compression
  library instead of the UCL library. Using the same compression algorithms,
  NRV achieves a better compression ratio. NRV is not publicly
  available, though, and probably never will be.

  While you may be disappointed that you don't have access to the
  latest state-of-the-art compression technology this is actually
  a safe guard for all of us. The UPX source code release makes
  it very easy for any evil-minded person to do all sort of bad
  things. By not providing the very best compression ratio it is much
  more difficult to create fake or otherwise disguised UPX versions (or
  similar trojans), as any end user will notice when the compression
  has gotten worse with a new "version" or "product".

  Finally please be aware that you now have your hands on the source
  code of the most sophisticated executable packer ever.
  Let's join our forces to make it even better :-)

  Share and enjoy,
  Markus & Laszlo


Introduction
------------

  Welcome to the UPX source code release!

  UPX is not a toy for kids. Apart from basic knowledge about executables
  and data compression you will need to be firm in C++, assembler,
  Perl and Makefiles. Probably some other things as well.

  If you can't manage to compile it then the sources are
  probably not for you. Don't email us for help.

  The authors use Linux for development. You might want to as well.


Short overview
--------------

  The UPX source code consists of two mainly independent parts:

  1) The src/stub directory contains the decompression stubs that
     will get added to each compressed executable.
     The stubs are mainly written in assembler and get "compiled"
     into ordinary C header files.

  2) The src directory contains the actual packer sources. The stubs
     are #included by the individual executable format handlers.


Prerequisites
-------------

  - first of all you need to build the UCL compression library
    http://www.oberhumer.com/opensource/ucl/


Tools needed to build/modify the UPX sources
--------------------------------------------

  - A C++ compiler supporting inner classes, templates, exceptions
    and RTTI.

  - GNU make 3.81 or better

  - zlib and zlib-devel [or zlib-dev] software packages for your
    host environment, or via  http://www.cygwin.org/setup.exe

  - lzma SDK, such as from  https://sourceforge.net/projects/sevenzip/
    files/LZMA%20SDK/4.43/


To compile the packer sources
-----------------------------

  Set the environment variable UPX_UCLDIR to point to your
  UCL build directory, e.g.

     set UPX_UCLDIR=c:\src\ucl-1.03                   (DOS / Windows)
     export UPX_UCLDIR=$HOME/local/src/ucl-1.03       (Unix)

  Set the environment variable UPX_LZMADIR to point to your
  to your unpacked lzma443.tar.bz2 source directory, e.g.

     export UPX_LZMADIR=$HOME/local/src/lzma-4.43     (Unix)
     export UPX_LZMA_VERSION=0x443  # perhaps 0x459,0x458,0x457,0x449,0x442

  Finally type

     make


If you want to modify the stub sources you'll also need
-------------------------------------------------------

  - Perl & Python

  - A number of cross-assemblers and cross-compilers - precompiled
    binaries for i386-linux hosts are available from
    http://sourceforge.net/projects/upx/files/upx-tools/20060823/


Misc. notes
-----------

  As the docs say: UPX is a portable, extendable and endian neutral
  program, so if you want to add some new stuff, try not to break these
  nice properties.

  - Use the types LE16, LE32, BE16 and BE32 for fields in file headers.
  - Use [sg]et_[bl]e(16|32) for getting/setting values in the data
    stream.
  - Use gcc extensions and other compiler specific stuff only through
    macros.

***

Some conventions:

  - follow our coding style
  - indent level = 4
  - expand all tabulators

  - Use throwSomeException() functions instead of throw SomeException():
    this makes the code shorter if used often.

***

Patches/Contributions

  - Please send us bug fixes/contributions only using

      diff -u oldfile newfile

    or

      diff -uNr olddirectory newdirectory


# vi:ts=4:et
